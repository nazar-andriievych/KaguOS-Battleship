// Battleship game in KaguOS Assembly

// Analyze the battlefields
var battlefield_path
var battlefield_analysis_counter
var row_counter
var column_counter
var battlefield_fd
var row
var cell
var ships_cells
var player1_ships_cells
var player2_ships_cells
var cell_coordinates

// Analyze the first battlefield
write "field1" to var:battlefield_path
write 0 to var:battlefield_analysis_counter
write "" to var:ships_cells
jump label:battlefield_analysis

// Analyze the second battlefield
label second_battlefield
copy var:ships_cells to var:player1_ships_cells
write "field2" to var:battlefield_path
write "" to var:ships_cells
jump label:battlefield_analysis

label battlefield_analysis
    // Open the battlefield file
    copy var:battlefield_path to REG_A
    write SYS_CALL_OPEN to REG_D
    write OP_SYS_CALL to REG_OP
    cpu_exec
    copy REG_RES to var:battlefield_fd

    write 1 to var:row_counter

    label row_loop
        // Read the row from the battlefield file
        copy var:battlefield_fd to REG_A
        copy var:row_counter to REG_B
        write SYS_CALL_READ to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec
        copy REG_RES to var:row

        write 1 to var:column_counter

        label column_loop
            // Get the cell
            copy var:row to REG_A
            copy var:column_counter to REG_B
            write "" to REG_C
            write OP_GET_COLUMN to REG_OP
            cpu_exec
            copy REG_RES to var:cell

            // Check if the cell is a ship
            write "X" to REG_A
            copy var:cell to REG_B
            write OP_CMP_EQ to REG_OP
            cpu_exec
            jump_err label:exit_error

            // If it is a ship, add it to the ships_cells
            jump_if label:add_ship
            label add_ship_end

            // Increment the column counter
            copy var:column_counter to REG_A
            write OP_INCR to REG_OP
            cpu_exec
            copy REG_RES to var:column_counter

            // Check if we reached the end of the row
            copy var:column_counter to REG_A
            write 11 to REG_B
            write OP_CMP_EQ to REG_OP
            cpu_exec
            jump_if label:column_loop_end
            jump label:column_loop

        label column_loop_end

        // Increment the row counter
        copy var:row_counter to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:row_counter

        // Check if we reached the end of the battlefield
        copy var:row_counter to REG_A
        write 11 to REG_B
        write OP_CMP_EQ to REG_OP
        cpu_exec
        jump_if label:row_loop_end
        jump label:row_loop

    // Add ship coordinates to the ships_cells
    label add_ship
        // Get the coordinates of the cell
        copy var:row_counter to REG_A
        copy var:column_counter to REG_B
        write "," to REG_C
        write OP_CONCAT_WITH to REG_OP
        cpu_exec
        copy REG_RES to var:cell_coordinates

        // Add the coordinates to the ships_cells
        copy var:ships_cells to REG_A
        copy var:cell_coordinates to REG_B
        write "" to REG_C
        write OP_CONCAT_WITH to REG_OP
        cpu_exec
        copy REG_RES to var:ships_cells

        // Add a space to separate the coordinates
        copy var:ships_cells to REG_A
        write " " to REG_B
        write "" to REG_C
        write OP_CONCAT_WITH to REG_OP
        cpu_exec
        copy REG_RES to var:ships_cells

        jump label:add_ship_end

    label row_loop_end
        // Close the battlefield file
        copy var:battlefield_fd to REG_A
        write SYS_CALL_CLOSE to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        copy var:battlefield_analysis_counter to REG_A
        write 1 to REG_B
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:battlefield_analysis_counter

        // Check if we have analysed all battlefields
        copy var:battlefield_analysis_counter to REG_A
        write 2 to REG_B
        write OP_CMP_NEQ to REG_OP
        cpu_exec
        jump_if label:second_battlefield

        copy var:ships_cells to var:player2_ships_cells
        jump label:battlefield_analysis_end

label battlefield_analysis_end

// Initialize the fields

// Get free memory space
var free_start
var free_end

copy 0 to REG_A
write 4 to REG_B
write " " to REG_C
write OP_GET_COLUMN to REG_OP
cpu_exec
copy REG_RES to var:free_start

copy 0 to REG_A
write 5 to REG_B
write " " to REG_C
write OP_GET_COLUMN to REG_OP
cpu_exec
copy REG_RES to var:free_end

// Cheak if we have enough RAM space
var difference
copy var:free_end to REG_A
copy var:free_start to REG_B
write OP_SUB to REG_OP
cpu_exec
copy REG_RES to var:difference

copy 22 to REG_A
copy var:difference to REG_B
write OP_CMP_LT to REG_OP
cpu_exec
jump_if_not label:exit_error

// Get fields bounds
var player1_bitmap_start
var player1_field_end
var player2_bitmap_start
var player2_field_end
var player1_bitmap_end
var player2_bitmap_end

copy var:free_start to var:player1_bitmap_start

copy var:free_start to REG_A
write 9 to REG_B
write OP_ADD to REG_OP
cpu_exec
copy REG_RES to var:player1_field_end

copy var:player1_field_end to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:player1_bitmap_end

copy var:player1_bitmap_end to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:player2_bitmap_start

copy var:player2_bitmap_start to REG_A
write 9 to REG_B
write OP_ADD to REG_OP
cpu_exec
copy REG_RES to var:player2_field_end

copy var:player2_field_end to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:player2_bitmap_end

// Initialize the battlefields
var empty_field_row
write "cccccccccc" to var:empty_field_row

// Initialyze counters
var init_battlefield_counter
var init_battlefield_counter_end

copy var:free_start to var:init_battlefield_counter

label init_battlefield_loop
    // Initialize a row of the battlefields
    copy var:empty_field_row to *var:init_battlefield_counter

    // Increment the counter
    copy var:init_battlefield_counter to REG_A
    write OP_INCR to REG_OP
    cpu_exec
    copy REG_RES to var:init_battlefield_counter

    // Check if we reached the end of the first bitmap
    copy var:init_battlefield_counter to REG_A
    copy var:player1_bitmap_end to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:init_battlefield_first_bitmap_end

    // Check if we reached the end of the second bitmap
    copy var:init_battlefield_counter to REG_A
    copy var:player2_bitmap_end to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:init_battlefield_loop_end
    jump label:init_battlefield_loop

    label init_battlefield_first_bitmap_end
        copy var:player2_bitmap_start to var:init_battlefield_counter
        jump label:init_battlefield_loop

label init_battlefield_loop_end

// Print a welcome message
write "Welcome to Battleship game!" to REG_A
write COLOR_NO to REG_B
write SYS_CALL_PRINTLN to REG_D
write OP_SYS_CALL to REG_OP
cpu_exec

// Delay for 2 second
write 2 to REG_A
write SYS_CALL_SLEEP to REG_D
write OP_SYS_CALL to REG_OP
cpu_exec


// Main loop
var player
write 1 to var:player

var player1_shots
var player2_shots
write "" to var:player1_shots
write "" to var:player2_shots

var player1_shots_count
var player2_shots_count
write 0 to var:player1_shots_count
write 0 to var:player2_shots_count

var row_number
var row_RAM

var column_number

label main_loop
    // Determine the current player
    copy var:player to REG_A
    write 1 to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:player1_turn
    jump label:player2_turn
    label turn_end
    jump label:main_loop

    // Player 1's turn
    label player1_turn
        // Display a message indicating it's Player 1's turn
        write "Player1 turn" to REG_A
        write COLOR_NO to REG_B
        write SYS_CALL_PRINTLN to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Pause for 2 seconds to allow the player to read the message
        write 2 to REG_A
        write SYS_CALL_SLEEP to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Render the pleyer2 bitmap
        copy var:player2_bitmap_start to REG_A
        copy var:player2_bitmap_end to REG_B
        write SYS_CALL_RENDER_BITMAP to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Display the battlefield label
        write "Player2 field" to REG_A
        write COLOR_NO to REG_B
        write SYS_CALL_PRINTLN to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Prompt Player 1 to input coordinates for their shot
        write "Player1: Shoot a boat by writing cordinates(row,column)(1,6): " to REG_A
        write COLOR_NO to REG_B
        write SYS_CALL_PRINTLN to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        label player1_reshot_end
        // Read the coordinates input by Player 1
        write KEYBOARD_READ_LINE to REG_A
        write SYS_CALL_READ_INPUT to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec
        copy REG_RES to var:cell_coordinates

        // Check if Player 1 has already shot at these coordinates
        copy var:player1_shots to REG_A
        copy var:cell_coordinates to REG_B
        write OP_CONTAINS to REG_OP
        cpu_exec
        jump_if label:player1_reshot

        // Add the new shot to Player 1's list of shots
        copy var:player1_shots to REG_A
        copy var:cell_coordinates to REG_B
        write " " to REG_C
        write OP_CONCAT_WITH to REG_OP
        cpu_exec
        copy REG_RES to var:player1_shots

        // Increment Player 1's shot count
        copy var:player1_shots_count to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:player1_shots_count

        // Check if Player 1 hit a ship on Player 2's battlefield
        copy var:player2_ships_cells to REG_A
        copy var:cell_coordinates to REG_B
        write OP_CONTAINS to REG_OP
        cpu_exec
        jump_if label:player1_hit
        jump label:player1_miss

        label player1_hit
            // Mark the hit cell with "r" (red)
            write "r" to var:cell
            jump label:player1_shot_check_end

        label player1_miss
            // Mark the missed cell with "b" (blue)
            write "b" to var:cell
        label player1_shot_check_end

        // Update Player 2's battlefield bitmap with the shot result

        // Extract the row number from the coordinates
        copy var:cell_coordinates to REG_A
        write 1 to REG_B 
        write "," to REG_C
        write OP_GET_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:row_number

        // Calculate the memory address of the row in RAM
        copy var:player2_bitmap_start to REG_A
        copy var:row_number to REG_B
        write OP_ADD to REG_OP
        cpu_exec

        copy REG_RES to REG_A
        write OP_DECR to REG_OP
        cpu_exec
        copy REG_RES to var:row_RAM

        // Read the row data from RAM
        copy *var:row_RAM to var:row

        // Extract the column number from the coordinates
        copy var:cell_coordinates to REG_A
        write 2 to REG_B 
        write "," to REG_C
        write OP_GET_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:column_number

        // Replace the cell in the row with the shot result ("r" or "b")
        copy var:row to REG_A
        copy var:column_number to REG_B
        write "" to REG_C
        copy var:cell to REG_D
        write OP_REPLACE_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:row

        // Write the updated row back to RAM
        copy var:row to *var:row_RAM

        jump label:turn_end

        label player1_reshot
            // Inform Player 1 that they already shot at these coordinates
            write "You alreadye shot there. Try other coordinates: " to REG_A
            write COLOR_NO to REG_B
            write SYS_CALL_PRINTLN to REG_D
            write OP_SYS_CALL to REG_OP
            cpu_exec
            jump label:player1_reshot_end
    
    label player2_turn
        // Display a message indicating it's Player 2's turn
        write "Player2 turn" to REG_A
        write COLOR_NO to REG_B
        write SYS_CALL_PRINTLN to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Pause for 2 seconds to allow the player to read the message
        write 2 to REG_A
        write SYS_CALL_SLEEP to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Render the pleyer1 bitmap
        copy var:player1_bitmap_start to REG_A
        copy var:player1_bitmap_end to REG_B
        write SYS_CALL_RENDER_BITMAP to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Display the battlefield label
        write "Player1 field" to REG_A
        write COLOR_NO to REG_B
        write SYS_CALL_PRINTLN to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        // Prompt Player 2 to input coordinates for their shot
        write "Player2: Shoot a boat by writing cordinates(row,column)(1,6): " to REG_A
        write COLOR_NO to REG_B
        write SYS_CALL_PRINTLN to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec

        label player2_reshot_end
        // Read the coordinates input by Player 2
        write KEYBOARD_READ_LINE to REG_A
        write SYS_CALL_READ_INPUT to REG_D
        write OP_SYS_CALL to REG_OP
        cpu_exec
        copy REG_RES to var:cell_coordinates

        // Check if Player 2 has already shot at these coordinates
        copy var:player2_shots to REG_A
        copy var:cell_coordinates to REG_B
        write OP_CONTAINS to REG_OP
        cpu_exec
        jump_if label:player1_reshot

        // Add the new shot to Player 2's list of shots
        copy var:player2_shots to REG_A
        copy var:cell_coordinates to REG_B
        write " " to REG_C
        write OP_CONCAT_WITH to REG_OP
        cpu_exec
        copy REG_RES to var:player2_shots

        // Increment Player 2's shot count
        copy var:player2_shots_count to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:player2_shots_count

        // Check if Player 2 hit a ship on Player 1's battlefield
        copy var:player1_ships_cells to REG_A
        copy var:cell_coordinates to REG_B
        write OP_CONTAINS to REG_OP
        cpu_exec
        jump_if label:player2_hit
        jump label:player2_miss

        label player2_hit
            // Mark the hit cell with "r" (red)
            write "r" to var:cell
            jump label:player2_shot_check_end

        label player2_miss
            // Mark the missed cell with "b" (blue)
            write "b" to var:cell
        label player2_shot_check_end

        // Update Player 1's battlefield bitmap with the shot result

        // Extract the row number from the coordinates
        copy var:cell_coordinates to REG_A
        write 1 to REG_B 
        write "," to REG_C
        write OP_GET_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:row_number

        // Calculate the memory address of the row in RAM
        copy var:player1_bitmap_start to REG_A
        copy var:row_number to REG_B
        write OP_ADD to REG_OP
        cpu_exec

        copy REG_RES to REG_A
        write OP_DECR to REG_OP
        cpu_exec
        copy REG_RES to var:row_RAM

        // Read the row data from RAM
        copy *var:row_RAM to var:row

        // Extract the column number from the coordinates
        copy var:cell_coordinates to REG_A
        write 2 to REG_B 
        write "," to REG_C
        write OP_GET_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:column_number

        // Replace the cell in the row with the shot result ("r" or "b")
        copy var:row to REG_A
        copy var:column_number to REG_B
        write "" to REG_C
        copy var:cell to REG_D
        write OP_REPLACE_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:row

        // Write the updated row back to RAM
        copy var:row to *var:row_RAM

        jump label:turn_end

        label player2_reshot
            // Inform Player 2 that they already shot at these coordinates
            write "You already shot there. Try other coordinates: " to REG_A
            write COLOR_NO to REG_B
            write SYS_CALL_PRINTLN to REG_D
            write OP_SYS_CALL to REG_OP
            cpu_exec
            jump label:player2_reshot_end



label exit
  write SYS_CALL_EXIT to REG_D
  write OP_SYS_CALL to REG_OP
  cpu_exec

label exit_error
  copy REG_ERROR to REG_A
  write COLOR_RED to REG_B
  write SYS_CALL_PRINTLN to REG_D
  write OP_SYS_CALL to REG_OP
  cpu_exec
  jump label:exit