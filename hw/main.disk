2048
START_PARTITION_TABLE
PARTITION_ENTRIES 4
NAME part1 START_BLOCK 10 END_BLOCK 2000
NAME part2 START_BLOCK 1001 END_BLOCK 1500
NAME part3 START_BLOCK 1501 END_BLOCK 1800
NAME part4 START_BLOCK 1801 END_BLOCK 2048
END_PARTITION_TABLE

FS_HEADER kagu_fs FIRST_USABLE_BLOCK 31 LAST_USABLE_BLOCK 2000
config.txt 4 4 0 user user BLOCKS 31 40
cat 7 7 7 user user BLOCKS 41 100
1.txt 4 4 4 user user BLOCKS 101 110
mario 7 7 7 user user BLOCKS 111 261
clear 7 7 7 user user BLOCKS 262 275
debug 7 7 7 user user BLOCKS 276 320
sleep 7 7 7 user user BLOCKS 321 335
user_sched 7 7 7 user group BLOCKS 336 395
minion 7 7 7 user user BLOCKS 396 547
field1 7 7 7 user user BLOCKS 546 555
field2 7 7 7 user user BLOCKS 556 565
battleship 7 7 7 user user BLOCKS 566 2000







FS_HEADER_END
proc_memory 2000     // memory allocated for one process
max_proc_count 10   // max count of active processes
max_fd_count 50     // max count of files open at the same time
schedule_quantum 100 // instruction count before rescheduling






1 4 70         #  copy REG_A => var:input_file
1 58 6         #  write "" => REG_B
1 59 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 54           #  jump_if lbl:exit_error
1 70 4         #  copy var:input_file => REG_A
1 60 10        #  write SYS_CALL_OPEN => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 54           #  jump_err lbl:exit_error
1 12 71        #  copy REG_RES => var:fd
1 62 72        #  write "1" => var:counter
1 71 4         #  copy var:fd => REG_A
1 72 6         #  copy var:counter => REG_B
1 63 10        #  write SYS_CALL_READ => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 45           #  jump_err lbl:close
1 12 4         #  copy REG_RES => REG_A
1 64 6         #  write COLOR_NO => REG_B
1 65 10        #  write SYS_CALL_PRINTLN => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 72 4         #  copy var:counter => REG_A
1 66 2         #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 72        #  copy REG_RES => var:counter
3 29           #  jump lbl:loop
1 71 4         #  copy var:fd => REG_A
1 67 10        #  write SYS_CALL_CLOSE => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 54           #  jump_err lbl:exit_error
1 68 4         #  write "0" => REG_A
1 69 10        #  write SYS_CALL_EXIT => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 62 4         #  write "1" => REG_A
1 69 10        #  write SYS_CALL_EXIT => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec

8
4
25
1
7
0
1
2
6
0
0







Some line 1
Line 2
Another line
Just for test
Ok
That's it
Text
Other Text
One more Text
The end
1 4 166        #  copy REG_A => var:iterations
1 126 4        #  write COLOR_CYAN => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 129 170      #  write "cccccccccccccccccccccccccccc" => 170
1 129 171      #  write "cccccccccccccccccccccccccccc" => 171
1 129 172      #  write "cccccccccccccccccccccccccccc" => 172
1 129 173      #  write "cccccccccccccccccccccccccccc" => 173
1 130 174      #  write "cccccccccccrrrrrcccccccccccc" => 174
1 131 175      #  write "ccccccccccrrrrrrrrrccccccccc" => 175
1 132 176      #  write "ccccccccccbbbyybyccccccccccc" => 176
1 133 177      #  write "cccccccccbybyyybyyyccccccccc" => 177
1 134 178      #  write "cccccccccbybbyyybyyycccccccc" => 178
1 135 179      #  write "cccccccccbbyyyybbbbccccccccc" => 179
1 136 180      #  write "cccccccccccyyyyyyycccccccccc" => 180
1 137 181      #  write "ccccccccccbbrbbbcccccccccccc" => 181
1 138 182      #  write "cccccccccbbbrbbrbbbccccccccc" => 182
1 139 183      #  write "ccccccccbbbbrrrrbbbbcccccccc" => 183
1 140 184      #  write "ccccccccyybryrryrbyycccccccc" => 184
1 141 185      #  write "ccccccccyyyrrrrrryyycccccccc" => 185
1 142 186      #  write "ccccccccyyrrrrrrrryycccccccc" => 186
1 143 187      #  write "ccccccccccrrrccrrrcccccccccc" => 187
1 144 188      #  write "cccccccccbbbccccbbbccccccccc" => 188
1 145 189      #  write "ccccccccbbbbccccbbbbcccccccc" => 189
1 146 190      #  write "cBgyrbmcwBBBBBBBBBBBBBBBBBBc" => 190
1 129 191      #  write "cccccccccccccccccccccccccccc" => 191
1 129 192      #  write "cccccccccccccccccccccccccccc" => 192
1 129 193      #  write "cccccccccccccccccccccccccccc" => 193
1 129 194      #  write "cccccccccccccccccccccccccccc" => 194
1 166 4        #  copy var:iterations => REG_A
1 147 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:iterations
1 166 4        #  copy var:iterations => REG_A
1 148 6        #  write "0" => REG_B
1 149 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 118          #  jump_if lbl:exit
1 150 167      #  write "170" => var:counter
1 167 4        #  copy var:counter => REG_A
1 151 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 152 6        #  write "21" => REG_B
1 153 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 154 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 155 4        #  write "0.1" => REG_A
1 156 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 157 6        #  write "174" => REG_B
1 158 2        #  write OP_CMP_NEQ => REG_OP
0              #  cpu_exec
4 57           #  jump_if lbl:loop_move_up
1 167 4        #  copy var:counter => REG_A
1 147 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 152 6        #  write "21" => REG_B
1 153 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 154 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 155 4        #  write "0.1" => REG_A
1 156 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 150 4        #  write "170" => REG_A
1 167 6        #  copy var:counter => REG_B
1 159 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 79           #  jump_if lbl:loop_move_down
1 150 167      #  write "170" => var:counter
1 160 4        #  write "c" => REG_A
1 *167 6       #  copy *var:counter => REG_B
1 161 8        #  write "" => REG_C
1 162 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 *167      #  copy REG_RES => *var:counter
1 167 4        #  copy var:counter => REG_A
1 151 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 163 6        #  write "191" => REG_B
1 159 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 102          #  jump_if lbl:shift_right
3 47           #  jump lbl:start
1 164 4        #  write COLOR_NO => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 148 4        #  write "0" => REG_A
1 165 10       #  write SYS_CALL_EXIT => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
7
9
25
cccccccccccccccccccccccccccc
cccccccccccrrrrrcccccccccccc
ccccccccccrrrrrrrrrccccccccc
ccccccccccbbbyybyccccccccccc
cccccccccbybyyybyyyccccccccc
cccccccccbybbyyybyyycccccccc
cccccccccbbyyyybbbbccccccccc
cccccccccccyyyyyyycccccccccc
ccccccccccbbrbbbcccccccccccc
cccccccccbbbrbbrbbbccccccccc
ccccccccbbbbrrrrbbbbcccccccc
ccccccccyybryrryrbyycccccccc
ccccccccyyyrrrrrryyycccccccc
ccccccccyyrrrrrrrryycccccccc
ccccccccccrrrccrrrcccccccccc
cccccccccbbbccccbbbccccccccc
ccccccccbbbbccccbbbbcccccccc
cBgyrbmcwBBBBBBBBBBBBBBBBBBc
3
0
8
170
2
21
0
10
0.1
11
174
9
10
c

17
191
0
0


1 25 4         #  write COLOR_NO => REG_A
1 26 10        #  write SYS_CALL_SET_BACKGROUND => REG_D
1 27 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 28 4         #  write "0" => REG_A
1 29 10        #  write SYS_CALL_EXIT => REG_D
1 27 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
0
9
25
0
0

1 4 55         #  copy REG_A => var:arg
1 55 4         #  copy var:arg => REG_A
1 45 6         #  write "on" => REG_B
1 46 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 37           #  jump_if lbl:debug_command_on
1 55 4         #  copy var:arg => REG_A
1 47 6         #  write "off" => REG_B
1 46 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 39           #  jump_if lbl:debug_command_off
1 48 4         #  write "Unknown argument. Expected: debug on/debug off" => REG_A
1 49 6         #  write COLOR_RED => REG_B
1 50 10        #  write SYS_CALL_PRINTLN => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 52 4         #  write "1" => REG_A
1 53 10        #  write SYS_CALL_EXIT => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
DEBUG_ON       #  DEBUG_ON
3 41           #  jump lbl:exit
DEBUG_OFF      #  DEBUG_OFF
3 41           #  jump lbl:exit
1 54 4         #  write "0" => REG_A
1 53 10        #  write SYS_CALL_EXIT => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
on
8
off
Unknown argument. Expected: debug on/debug off
3
1
25
1
0
0







1 27 2         #  write OP_IS_NUM => REG_OP
0              #  cpu_exec
5 23           #  jump_if_not lbl:exit
1 28 10        #  write SYS_CALL_SLEEP => REG_D
1 29 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 30 4         #  write "0" => REG_A
1 31 10        #  write SYS_CALL_EXIT => REG_D
1 29 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
7
11
25
0
0
1 56 4         #  write "Enter command to schedule or command exit to quit:" => REG_A
1 57 6         #  write COLOR_NO => REG_B
1 58 10        #  write SYS_CALL_PRINTLN => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 60 4         #  write KEYBOARD_READ_LINE => REG_A
1 61 10        #  write SYS_CALL_READ_INPUT => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 62 6         #  write "exit" => REG_B
1 63 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 46           #  jump_if lbl:exit
1 64 6         #  write "50" => REG_B
1 65 10        #  write SYS_CALL_SCHED_PROGRAM => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 50           #  jump_err lbl:error
1 12 72        #  copy REG_RES => var:pid
1 66 4         #  write "Program loaded with PID " => REG_A
1 67 6         #  write COLOR_GREEN => REG_B
1 68 10        #  write SYS_CALL_PRINT => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 72 4         #  copy var:pid => REG_A
1 58 10        #  write SYS_CALL_PRINTLN => REG_D
0              #  cpu_exec
3 17           #  jump lbl:start
1 69 4         #  write "0" => REG_A
1 70 10        #  write SYS_CALL_EXIT => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 16 4         #  copy REG_ERROR => REG_A
1 71 6         #  write COLOR_RED => REG_B
1 58 10        #  write SYS_CALL_PRINTLN => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 17           #  jump lbl:start
Enter command to schedule or command exit to quit:
0
1
25
KeyboardReadLine
3
exit
8
50
14
Program loaded with PID 
1
2
0
0
3





1 4 165        #  copy REG_A => var:iterations
1 126 4        #  write COLOR_CYAN => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 129 170      #  write "cccccccccccccccccccccccccccc" => 170
1 129 171      #  write "cccccccccccccccccccccccccccc" => 171
1 129 172      #  write "cccccccccccccccccccccccccccc" => 172
1 129 173      #  write "cccccccccccccccccccccccccccc" => 173
1 130 174      #  write "ccccccccccyyyyyyycccccccccccc" => 174
1 131 175      #  write "cccccccccyyyyyyyyyccccccccccc" => 175
1 132 176      #  write "ccccccccyybbyyybbyyccccccccc" => 176
1 133 177      #  write "ccccccccBbwBbBbwBbBccccccccc" => 177
1 134 178      #  write "ccccccccBbwwbBbwwbBccccccccc" => 178
1 135 179      #  write "ccccccccyybbyyybbyyccccccccc" => 179
1 136 180      #  write "ccccccccyyyyyyyyyyycccccccccc" => 180
1 137 181      #  write "ccccccccyyByyyyyByycccccccccc" => 181
1 138 182      #  write "ccccccccyyyBBBBByyycccccccccc" => 182
1 139 183      #  write "ccccccccbyyyyyyyyybcccccccccc" => 183
1 140 184      #  write "ccccccccybbbbbbbbbycccccccccc" => 184
1 141 185      #  write "ccccccccyybbbbbbbyycccccccccc" => 185
1 141 186      #  write "ccccccccyybbbbbbbyycccccccccc" => 186
1 140 187      #  write "ccccccccybbbbbbbbbycccccccccc" => 187
1 142 188      #  write "cccccccBBbbbbbbbbbBBccccccccc" => 188
1 143 189      #  write "ccccccccBbbbbbbbbbBcccccccccc" => 189
1 144 190      #  write "ccccccccccBBcccBBcccccccccccc" => 190
1 145 191      #  write "cccccccccBBBcccBBBccccccccccc" => 191
1 129 192      #  write "cccccccccccccccccccccccccccc" => 192
1 129 193      #  write "cccccccccccccccccccccccccccc" => 193
1 129 194      #  write "cccccccccccccccccccccccccccc" => 194
1 165 4        #  copy var:iterations => REG_A
1 146 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 165       #  copy REG_RES => var:iterations
1 165 4        #  copy var:iterations => REG_A
1 147 6        #  write "0" => REG_B
1 148 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 118          #  jump_if lbl:exit
1 149 166      #  write "170" => var:counter
1 166 4        #  copy var:counter => REG_A
1 150 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:counter
1 166 4        #  copy var:counter => REG_A
1 151 6        #  write "21" => REG_B
1 152 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 166 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 153 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 154 4        #  write "0.1" => REG_A
1 155 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 166 4        #  copy var:counter => REG_A
1 156 6        #  write "174" => REG_B
1 157 2        #  write OP_CMP_NEQ => REG_OP
0              #  cpu_exec
4 57           #  jump_if lbl:loop_move_up
1 166 4        #  copy var:counter => REG_A
1 146 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:counter
1 166 4        #  copy var:counter => REG_A
1 151 6        #  write "21" => REG_B
1 152 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 166 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 153 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 154 4        #  write "0.1" => REG_A
1 155 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 149 4        #  write "170" => REG_A
1 166 6        #  copy var:counter => REG_B
1 158 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 79           #  jump_if lbl:loop_move_down
1 149 166      #  write "170" => var:counter
1 159 4        #  write "c" => REG_A
1 *166 6       #  copy *var:counter => REG_B
1 160 8        #  write "" => REG_C
1 161 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 *166      #  copy REG_RES => *var:counter
1 166 4        #  copy var:counter => REG_A
1 150 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:counter
1 166 4        #  copy var:counter => REG_A
1 162 6        #  write "192" => REG_B
1 158 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 102          #  jump_if lbl:shift_right
3 47           #  jump lbl:start
1 163 4        #  write COLOR_NO => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 147 4        #  write "0" => REG_A
1 164 10       #  write SYS_CALL_EXIT => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
7
9
25
cccccccccccccccccccccccccccc
ccccccccccyyyyyyycccccccccccc
cccccccccyyyyyyyyyccccccccccc
ccccccccyybbyyybbyyccccccccc
ccccccccBbwBbBbwBbBccccccccc
ccccccccBbwwbBbwwbBccccccccc
ccccccccyybbyyybbyyccccccccc
ccccccccyyyyyyyyyyycccccccccc
ccccccccyyByyyyyByycccccccccc
ccccccccyyyBBBBByyycccccccccc
ccccccccbyyyyyyyyybcccccccccc
ccccccccybbbbbbbbbycccccccccc
ccccccccyybbbbbbbyycccccccccc
cccccccBBbbbbbbbbbBBccccccccc
ccccccccBbbbbbbbbbBcccccccccc
ccccccccccBBcccBBcccccccccccc
cccccccccBBBcccBBBccccccccccc
3
0
8
170
2
21
0
10
0.1
11
174
9
10
c

17
192
0
0


X--X------
X----X----
X--X------
X--------X
--XXX-----
X---------
X---X-----
----X--X--
-X--X--X--
-X--------
X----X---X
--X------X
X-----X--X
------X---
------X---
-XX-------
---------X
-XX--X---X
-----X---X
-XX------X
1 471 525      #  write "field1" => var:battlefield_path
1 472 526      #  write "0" => var:battlefield_analysis_counter
1 473 532      #  write "" => var:ships_cells
3 25           #  jump lbl:battlefield_analysis
1 532 533      #  copy var:ships_cells => var:player1_ships_cells
1 474 525      #  write "field2" => var:battlefield_path
1 473 532      #  write "" => var:ships_cells
3 25           #  jump lbl:battlefield_analysis
1 525 4        #  copy var:battlefield_path => REG_A
1 475 10       #  write SYS_CALL_OPEN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 529       #  copy REG_RES => var:battlefield_fd
1 477 527      #  write "1" => var:row_counter
1 529 4        #  copy var:battlefield_fd => REG_A
1 527 6        #  copy var:row_counter => REG_B
1 478 10       #  write SYS_CALL_READ => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 530       #  copy REG_RES => var:row
1 477 528      #  write "1" => var:column_counter
1 530 4        #  copy var:row => REG_A
1 528 6        #  copy var:column_counter => REG_B
1 473 8        #  write "" => REG_C
1 479 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 531       #  copy REG_RES => var:cell
1 480 4        #  write "X" => REG_A
1 531 6        #  copy var:cell => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
6 465          #  jump_err lbl:exit_error
4 70           #  jump_if lbl:add_ship
1 528 4        #  copy var:column_counter => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 528       #  copy REG_RES => var:column_counter
1 528 4        #  copy var:column_counter => REG_A
1 483 6        #  write "11" => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 60           #  jump_if lbl:column_loop_end
3 38           #  jump lbl:column_loop
1 527 4        #  copy var:row_counter => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 527       #  copy REG_RES => var:row_counter
1 527 4        #  copy var:row_counter => REG_A
1 483 6        #  write "11" => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 89           #  jump_if lbl:row_loop_end
3 31           #  jump lbl:row_loop
1 527 4        #  copy var:row_counter => REG_A
1 528 6        #  copy var:column_counter => REG_B
1 484 8        #  write "," => REG_C
1 485 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 535       #  copy REG_RES => var:cell_coordinates
1 532 4        #  copy var:ships_cells => REG_A
1 535 6        #  copy var:cell_coordinates => REG_B
1 473 8        #  write "" => REG_C
1 485 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 532       #  copy REG_RES => var:ships_cells
1 532 4        #  copy var:ships_cells => REG_A
1 486 6        #  write " " => REG_B
1 473 8        #  write "" => REG_C
1 485 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 532       #  copy REG_RES => var:ships_cells
3 50           #  jump lbl:add_ship_end
1 529 4        #  copy var:battlefield_fd => REG_A
1 487 10       #  write SYS_CALL_CLOSE => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 526 4        #  copy var:battlefield_analysis_counter => REG_A
1 477 6        #  write "1" => REG_B
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 526       #  copy REG_RES => var:battlefield_analysis_counter
1 526 4        #  copy var:battlefield_analysis_counter => REG_A
1 488 6        #  write "2" => REG_B
1 489 2        #  write OP_CMP_NEQ => REG_OP
0              #  cpu_exec
4 21           #  jump_if lbl:second_battlefield
1 532 534      #  copy var:ships_cells => var:player2_ships_cells
3 105          #  jump lbl:battlefield_analysis_end
1 0 4          #  copy 0 => REG_A
1 490 6        #  write "4" => REG_B
1 486 8        #  write " " => REG_C
1 479 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 536       #  copy REG_RES => var:free_start
1 0 4          #  copy 0 => REG_A
1 491 6        #  write "5" => REG_B
1 486 8        #  write " " => REG_C
1 479 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 537       #  copy REG_RES => var:free_end
1 537 4        #  copy var:free_end => REG_A
1 536 6        #  copy var:free_start => REG_B
1 492 2        #  write OP_SUB => REG_OP
0              #  cpu_exec
1 12 538       #  copy REG_RES => var:difference
1 22 4         #  copy 22 => REG_A
1 538 6        #  copy var:difference => REG_B
1 493 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
5 465          #  jump_if_not lbl:exit_error
1 536 539      #  copy var:free_start => var:player1_bitmap_start
1 536 4        #  copy var:free_start => REG_A
1 494 6        #  write "9" => REG_B
1 495 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 12 540       #  copy REG_RES => var:player1_field_end
1 540 4        #  copy var:player1_field_end => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 543       #  copy REG_RES => var:player1_bitmap_end
1 543 4        #  copy var:player1_bitmap_end => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 541       #  copy REG_RES => var:player2_bitmap_start
1 541 4        #  copy var:player2_bitmap_start => REG_A
1 494 6        #  write "9" => REG_B
1 495 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 12 542       #  copy REG_RES => var:player2_field_end
1 542 4        #  copy var:player2_field_end => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 544       #  copy REG_RES => var:player2_bitmap_end
1 496 545      #  write "cccccccccc" => var:empty_field_row
1 536 546      #  copy var:free_start => var:init_battlefield_counter
1 545 *546     #  copy var:empty_field_row => *var:init_battlefield_counter
1 546 4        #  copy var:init_battlefield_counter => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 546       #  copy REG_RES => var:init_battlefield_counter
1 546 4        #  copy var:init_battlefield_counter => REG_A
1 543 6        #  copy var:player1_bitmap_end => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 168          #  jump_if lbl:init_battlefield_first_bitmap_end
1 546 4        #  copy var:init_battlefield_counter => REG_A
1 544 6        #  copy var:player2_bitmap_end => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 170          #  jump_if lbl:init_battlefield_loop_end
3 152          #  jump lbl:init_battlefield_loop
1 541 546      #  copy var:player2_bitmap_start => var:init_battlefield_counter
3 152          #  jump lbl:init_battlefield_loop
1 533 4        #  copy var:player1_ships_cells => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 534 4        #  copy var:player2_ships_cells => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 499 4        #  write "Welcome to Battleship game!" => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 488 4        #  write "2" => REG_A
1 500 10       #  write SYS_CALL_SLEEP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 477 548      #  write "1" => var:player
1 473 549      #  write "" => var:player1_shots
1 473 550      #  write "" => var:player2_shots
1 472 551      #  write "0" => var:player1_hits_count
1 472 552      #  write "0" => var:player2_hits_count
1 501 556      #  write "20" => var:all_ships_cells
1 472 557      #  write "0" => var:hit_switch
1 548 4        #  copy var:player => REG_A
1 477 6        #  write "1" => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 220          #  jump_if lbl:player1_turn
3 327          #  jump lbl:player2_turn
1 548 4        #  copy var:player => REG_A
1 477 6        #  write "1" => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 434          #  jump_if lbl:player1_win_cheak
3 440          #  jump lbl:player2_win_cheak
1 557 4        #  copy var:hit_switch => REG_A
1 477 6        #  write "1" => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 196          #  jump_if lbl:main_loop
1 548 4        #  copy var:player => REG_A
1 477 6        #  write "1" => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 458          #  jump_if lbl:player1_to_player2
3 460          #  jump lbl:player2_to_player1
3 196          #  jump lbl:main_loop
1 502 4        #  write "Player1 turn" => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 488 4        #  write "2" => REG_A
1 500 10       #  write SYS_CALL_SLEEP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 541 4        #  copy var:player2_bitmap_start => REG_A
1 544 6        #  copy var:player2_bitmap_end => REG_B
1 503 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 504 4        #  write "Player2 field" => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 505 4        #  write "Player1: Shoot a boat by writing cordinates(row,column)(1,6): " => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 506 4        #  write KEYBOARD_READ_LINE => REG_A
1 507 10       #  write SYS_CALL_READ_INPUT => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 535       #  copy REG_RES => var:cell_coordinates
1 549 4        #  copy var:player1_shots => REG_A
1 535 6        #  copy var:cell_coordinates => REG_B
1 508 2        #  write OP_CONTAINS => REG_OP
0              #  cpu_exec
4 321          #  jump_if lbl:player1_reshot
1 549 4        #  copy var:player1_shots => REG_A
1 535 6        #  copy var:cell_coordinates => REG_B
1 486 8        #  write " " => REG_C
1 485 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 549       #  copy REG_RES => var:player1_shots
1 534 4        #  copy var:player2_ships_cells => REG_A
1 535 6        #  copy var:cell_coordinates => REG_B
1 508 2        #  write OP_CONTAINS => REG_OP
0              #  cpu_exec
4 266          #  jump_if lbl:player1_hit
3 274          #  jump lbl:player1_miss
1 551 4        #  copy var:player1_hits_count => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 551       #  copy REG_RES => var:player1_hits_count
1 509 531      #  write "r" => var:cell
1 477 557      #  write "1" => var:hit_switch
1 510 558      #  write "You hit a ship!" => var:shot_message
3 277          #  jump lbl:player1_shot_check_end
1 511 531      #  write "b" => var:cell
1 472 557      #  write "0" => var:hit_switch
1 512 558      #  write "You missed!" => var:shot_message
1 535 4        #  copy var:cell_coordinates => REG_A
1 477 6        #  write "1" => REG_B
1 484 8        #  write "," => REG_C
1 479 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 553       #  copy REG_RES => var:row_number
1 541 4        #  copy var:player2_bitmap_start => REG_A
1 553 6        #  copy var:row_number => REG_B
1 495 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 513 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 554       #  copy REG_RES => var:row_RAM
1 *554 530     #  copy *var:row_RAM => var:row
1 535 4        #  copy var:cell_coordinates => REG_A
1 488 6        #  write "2" => REG_B
1 484 8        #  write "," => REG_C
1 479 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 555       #  copy REG_RES => var:column_number
1 530 4        #  copy var:row => REG_A
1 555 6        #  copy var:column_number => REG_B
1 473 8        #  write "" => REG_C
1 531 10       #  copy var:cell => REG_D
1 514 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 530       #  copy REG_RES => var:row
1 530 *554     #  copy var:row => *var:row_RAM
1 541 4        #  copy var:player2_bitmap_start => REG_A
1 544 6        #  copy var:player2_bitmap_end => REG_B
1 503 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 558 4        #  copy var:shot_message => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 488 4        #  write "2" => REG_A
1 500 10       #  write SYS_CALL_SLEEP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 202          #  jump lbl:turn_end
1 515 4        #  write "You alreadye shot there. Try other coordinates: " => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 244          #  jump lbl:player1_reshot_end
1 516 4        #  write "Player2 turn" => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 488 4        #  write "2" => REG_A
1 500 10       #  write SYS_CALL_SLEEP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 539 4        #  copy var:player1_bitmap_start => REG_A
1 543 6        #  copy var:player1_bitmap_end => REG_B
1 503 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 517 4        #  write "Player1 field" => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 518 4        #  write "Player2: Shoot a boat by writing cordinates(row,column)(1,6): " => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 506 4        #  write KEYBOARD_READ_LINE => REG_A
1 507 10       #  write SYS_CALL_READ_INPUT => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 535       #  copy REG_RES => var:cell_coordinates
1 550 4        #  copy var:player2_shots => REG_A
1 535 6        #  copy var:cell_coordinates => REG_B
1 508 2        #  write OP_CONTAINS => REG_OP
0              #  cpu_exec
4 321          #  jump_if lbl:player1_reshot
1 550 4        #  copy var:player2_shots => REG_A
1 535 6        #  copy var:cell_coordinates => REG_B
1 486 8        #  write " " => REG_C
1 485 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 550       #  copy REG_RES => var:player2_shots
1 533 4        #  copy var:player1_ships_cells => REG_A
1 535 6        #  copy var:cell_coordinates => REG_B
1 508 2        #  write OP_CONTAINS => REG_OP
0              #  cpu_exec
4 373          #  jump_if lbl:player2_hit
3 381          #  jump lbl:player2_miss
1 552 4        #  copy var:player2_hits_count => REG_A
1 482 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 552       #  copy REG_RES => var:player2_hits_count
1 509 531      #  write "r" => var:cell
1 477 557      #  write "1" => var:hit_switch
1 510 558      #  write "You hit a ship!" => var:shot_message
3 384          #  jump lbl:player2_shot_check_end
1 511 531      #  write "b" => var:cell
1 472 557      #  write "0" => var:hit_switch
1 512 558      #  write "You missed!" => var:shot_message
1 535 4        #  copy var:cell_coordinates => REG_A
1 477 6        #  write "1" => REG_B
1 484 8        #  write "," => REG_C
1 479 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 553       #  copy REG_RES => var:row_number
1 539 4        #  copy var:player1_bitmap_start => REG_A
1 553 6        #  copy var:row_number => REG_B
1 495 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 513 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 554       #  copy REG_RES => var:row_RAM
1 *554 530     #  copy *var:row_RAM => var:row
1 535 4        #  copy var:cell_coordinates => REG_A
1 488 6        #  write "2" => REG_B
1 484 8        #  write "," => REG_C
1 479 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 555       #  copy REG_RES => var:column_number
1 530 4        #  copy var:row => REG_A
1 555 6        #  copy var:column_number => REG_B
1 473 8        #  write "" => REG_C
1 531 10       #  copy var:cell => REG_D
1 514 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 530       #  copy REG_RES => var:row
1 530 *554     #  copy var:row => *var:row_RAM
1 539 4        #  copy var:player1_bitmap_start => REG_A
1 543 6        #  copy var:player1_bitmap_end => REG_B
1 503 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 558 4        #  copy var:shot_message => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 488 4        #  write "2" => REG_A
1 500 10       #  write SYS_CALL_SLEEP => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 202          #  jump lbl:turn_end
1 519 4        #  write "You already shot there. Try other coordinates: " => REG_A
1 497 6        #  write COLOR_NO => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 351          #  jump lbl:player2_reshot_end
1 556 4        #  copy var:all_ships_cells => REG_A
1 551 6        #  copy var:player1_hits_count => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 446          #  jump_if lbl:player1_win
3 208          #  jump lbl:win_cheak_end
1 556 4        #  copy var:all_ships_cells => REG_A
1 552 6        #  copy var:player2_hits_count => REG_B
1 481 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 452          #  jump_if lbl:player2_win
3 208          #  jump lbl:win_cheak_end
1 520 4        #  write "Player 1 wins!" => REG_A
1 521 6        #  write COLOR_GREEN => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 462          #  jump lbl:exit
1 522 4        #  write "Player 2 wins!" => REG_A
1 521 6        #  write COLOR_GREEN => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 462          #  jump lbl:exit
1 488 548      #  write "2" => var:player
3 219          #  jump lbl:player_switch_end
1 477 548      #  write "1" => var:player
3 219          #  jump lbl:player_switch_end
1 523 10       #  write SYS_CALL_EXIT => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 16 4         #  copy REG_ERROR => REG_A
1 524 6        #  write COLOR_RED => REG_B
1 498 10       #  write SYS_CALL_PRINTLN => REG_D
1 476 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 462          #  jump lbl:exit
field1
0

field2
4
25
1
7
15
X
8
2
11
,
17
 
6
2
9
4
5
1
10
9
0
cccccccccc
0
1
Welcome to Battleship game!
11
20
Player1 turn
10
Player2 field
Player1: Shoot a boat by writing cordinates(row,column)(1,6): 
KeyboardReadLine
3
12
r
You hit a ship!
b
You missed!
3
16
You alreadye shot there. Try other coordinates: 
Player2 turn
Player1 field
Player2: Shoot a boat by writing cordinates(row,column)(1,6): 
You already shot there. Try other coordinates: 
Player 1 wins!
1
Player 2 wins!
0
3














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































